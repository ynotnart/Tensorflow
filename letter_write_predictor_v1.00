



# Letter_write_predictor_v1.00
# Tensorflow example. 
# Created: 10/29/2025
# Source: ChatGPT
# This script will identify manual letterwriting and make predictions.
#
#


import os
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
from sklearn.model_selection import train_test_split

MODEL_H5 = "mnist_cnn_model.h5"
MODEL_KERAS = "mnist_cnn_model.keras"

def build_model():
    model = models.Sequential([
        layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),
        layers.Conv2D(32, (3,3), activation='relu'),
        layers.MaxPooling2D((2,2)),
        layers.Dropout(0.25),

        layers.Conv2D(64, (3,3), activation='relu'),
        layers.Conv2D(64, (3,3), activation='relu'),
        layers.MaxPooling2D((2,2)),
        layers.Dropout(0.25),

        layers.Flatten(),
        layers.Dense(128, activation='relu'),
        layers.Dropout(0.5),
        layers.Dense(10, activation='softmax')
    ])
    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])
    return model

def main(epochs=10):
    print("Loading MNIST...")
    mnist = tf.keras.datasets.mnist
    (x_train, y_train), (x_test, y_test) = mnist.load_data()
    x_train, x_test = x_train / 255.0, x_test / 255.0
    x_train = x_train[..., np.newaxis]
    x_test = x_test[..., np.newaxis]

    # Split training set into training + validation manually
    x_train_full, x_val, y_train_full, y_val = train_test_split(
        x_train, y_train, test_size=0.1, random_state=42
    )

    # Data augmentation
    datagen = ImageDataGenerator(
        rotation_range=15,
        width_shift_range=0.1,
        height_shift_range=0.1,
        zoom_range=0.1
    )
    datagen.fit(x_train_full)

    model = build_model()

    print("Training CNN on MNIST with augmentation...")
    model.fit(
        datagen.flow(x_train_full, y_train_full, batch_size=64),
        epochs=epochs,
        validation_data=(x_val, y_val)
    )
    print("Training done!")

    # Evaluate on test set
    test_loss, test_acc = model.evaluate(x_test, y_test, verbose=0)
    print(f"Test accuracy: {test_acc:.4f}")

    # Save model
    print(f"Saving model to '{MODEL_KERAS}' and '{MODEL_H5}'...")
    model.save(MODEL_KERAS)
    model.save(MODEL_H5)
    print("Saved.")

if __name__ == "__main__":
    main(epochs=20)
